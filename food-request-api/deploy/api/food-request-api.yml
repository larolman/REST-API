apiVersion: apps/v1
kind: Deployment
metadata:
  name: food-request-api
  labels:
    app: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      volumes:
        - name: cloud-sql-vol
          secret:
            secretName: cloudsql-sa-creds
      containers:
        - name: food-request-api
          image: gcr.io/project/food-request-api:latest
          ports:
            - containerPort: 8080
          env:
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secrets
                  key: ROOT_PASSWORD
            - name: MYSQL_HOST
              value: "jdbc:mysql://0.0.0.0/foodrequest?createDatabaseIfNotExist=true&serverTimezone=UTC&useSSL=false"
            - name: MYSQL_USER
              value: "root"
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:latest
          env:
            - name: INSTANCE_CONNECTION
              valueFrom:
                configMapKeyRef:
                  name: connectionname
                  key: connectionname
          command:
            - "/cloud_sql_proxy"
            - "-instances=$(INSTANCE_CONNECTION)=tcp:0.0.0.0:3306"
            - "-credential_file=/secrets/credentials.json"
          volumeMounts:
            - name: cloud-sql-vol
              mountPath: /secrets/
              readOnly: true
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
spec:
  selector:
    app: api
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: api-ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
spec:
  rules:
    - http:
        paths:
          - path: /
            backend:
              serviceName: api-service
              servicePort: 80